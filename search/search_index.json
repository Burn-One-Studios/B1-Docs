{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Burn One Studios Documentation","text":"<p>Hello and welcome to the official documentation hub for all Burn One Studios projects. This site provides comprehensive guides, tutorials, and references to help you get started with and make the most out of our projects.</p>"},{"location":"#projects-overview","title":"Projects Overview","text":"<p>Here's a brief overview of our primary projects:</p>"},{"location":"#b1-skillz","title":"B1-skillz","text":"<p>A skillsystem based on GTA's existing skills.</p> <ul> <li>GitHub</li> <li>Documentation</li> </ul>"},{"location":"#support-community","title":"Support &amp; Community","text":"<p>Got questions or need help? Join our Discord Server and ask in the <code>#support</code> fourm. </p>"},{"location":"FiveM-Resources/B1-Lib/Documention/","title":"\ud83d\ude80 B1-lib Documentation","text":"<p>A small, easy-to-use FiveM library that provides normalized functions for QBCore and ESX frameworks.</p> <p> </p> <p>Skip to Quick Start</p>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#installation","title":"\ud83d\udce6 Installation","text":"<ol> <li>Download the <code>b1-lib</code> folder to <code>resources/[lib]/b1-lib/</code></li> <li>Add <code>ensure b1-lib</code> to your <code>server.cfg</code></li> <li>Optional dependencies: <code>oxmysql</code>, <code>ox_inventory</code>, <code>ox_lib</code></li> </ol> <pre><code>-- server.cfg\nensure b1-lib\nensure oxmysql\nensure ox_inventory\nensure ox_lib\n</code></pre> <p>Optional but recommended</p> <ul> <li>oxmysql: enables the DB and ORM features</li> <li>ox_inventory: enables inventory helpers</li> <li>ox_lib: enables unified notifications / progress / skill checks</li> </ul>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#quick-start","title":"\u26a1 Quick Start","text":"<p>=== \"Method 1 \u00b7 Get the entire B1 object (Recommended)\"</p> <pre><code>-- Get the complete B1 object\nlocal B1 = exports['b1-lib']:getB1Object()\n\n-- Use any B1 function\nB1.log('info', 'Hello from b1-lib!')\nB1.notify('Welcome to the server!', 'success')\nB1.progressBar('Loading...', 5000)\n</code></pre> <p>=== \"Method 2 \u00b7 Individual exports\"</p> <pre><code>-- Use specific exports\nexports['b1-lib']:log('info', 'Hello from b1-lib!')\nexports['b1-lib']:notify('Welcome to the server!', 'success')\nexports['b1-lib']:progressBar('Loading...', 5000)\n</code></pre> <p>=== \"Method 3 \u00b7 Mixed approach\"</p> <pre><code>-- Get B1 object for most functions\nlocal B1 = exports['b1-lib']:getB1Object()\n\n-- Use individual exports for specific cases\nlocal success = exports['b1-lib']:skillCheck('hard')\n</code></pre> <p>Why Method 1?</p> <ul> <li>\u2705 Clean, readable code</li> <li>\u2705 Access to all B1 functions</li> <li>\u2705 Better performance (single export call)</li> <li>\u2705 IDE autocomplete support</li> </ul>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#basic-usage-examples","title":"\ud83e\udde9 Basic Usage Examples","text":"<pre><code>-- Get B1 object (recommended approach)\nlocal B1 = exports['b1-lib']:getB1Object()\n\n-- Logging + notifications\nB1.log('info', 'Hello from b1-lib!')\nB1.notify('Welcome to the server!', 'success')\n\n-- UI functions\nB1.progressBar('Loading...', 5000, {\n    onFinish = function()\n        B1.notify('Loading complete!', 'success')\n    end\n})\n\nlocal success = B1.skillCheck('easy')\nif success then\n    B1.notify('Skill check passed!', 'success')\nend\n\n-- Spawn a vehicle (client-side example below has an alt signature)\nlocal netId = B1.spawnVehicle('adder', function(vehicle)\n    print('Vehicle spawned:', vehicle)\nend)\n\n-- Simple database query (server-side only)\nlocal players = B1.db.query('SELECT * FROM users WHERE job = ?', {'police'})\n\n-- ORM model (server-side only)\nlocal Users = B1.orm.define('users', 'id')\nlocal user = Users:find(1)\nuser.name = 'New Name'\nuser:save()\n</code></pre>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#logger-shared-client-server","title":"\ud83d\udcdd Logger (Shared: client &amp; server)","text":"<p>Colored, boxed output with traceback support and calling resource detection.</p>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#functions","title":"Functions","text":"Function Type Description <code>B1.log(level, message, opts?)</code> <code>(string\\|number, any, table?) -&gt; void</code> Log a message with specified level <code>B1.setLogLevel(level)</code> <code>(string) -&gt; void</code> Set the minimum log level <code>B1.getLogLevel()</code> <code>() -&gt; string</code> Get current log level","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#log-levels","title":"Log Levels","text":"Level Numeric Color Description <code>debug</code> <code>1</code> \ud83d\udd35 Blue Debug information <code>info</code> <code>2</code> \ud83d\udfe2 Green General information <code>warning</code> <code>3</code> \ud83d\udfe1 Yellow Warning messages <code>error</code> <code>4</code> \ud83d\udd34 Red Error messages with traceback","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#examples","title":"Examples","text":"<pre><code>-- String levels\nB1.log('info', 'This is an info message')\nB1.log('warning', 'This is a warning')\nB1.log('error', 'This is an error')\n\n-- Numeric levels (1=debug, 2=info, 3=warning, 4=error)\nB1.log(2, 'This is also an info message')\n\n-- Table logging (automatically formatted)\nB1.log('info', { name = 'John', age = 30, job = 'police' })\n\n-- With context\nB1.log('info', 'Player joined', { ctx = { playerId = 123, name = 'John', source = 1 } })\n\n-- Error with automatic traceback\nB1.log('error', 'Something went wrong!')\n\n-- Log level management\nB1.setLogLevel('debug')\nB1.setLogLevel('error')\nlocal currentLevel = B1.getLogLevel() -- 'error'\n</code></pre> <p>Output format</p> <pre><code>^3[b1-lib]^7^2[INFO]^7 [my-resource] Player joined | {\"playerId\":123,\"name\":\"John\"}\n</code></pre>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#utils-shared","title":"\ud83d\udee0\ufe0f Utils (Shared)","text":"<p>Common utilities for strings, numbers, and system detection.</p>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#functions_1","title":"Functions","text":"Function Type Description Example <code>B1.randomStr(length?)</code> <code>(number?) -&gt; string</code> Generate random string <code>B1.randomStr(10)</code> \u2192 <code>\"aB3xY9mK2p\"</code> <code>B1.randomInt(length?)</code> <code>(number?) -&gt; number</code> Generate random integer <code>B1.randomInt(6)</code> \u2192 <code>123456</code> <code>B1.splitStr(str, delimiter?)</code> <code>(string, string?) -&gt; table</code> Split string by delimiter <code>B1.splitStr('a,b,c', ',')</code> \u2192 <code>{\"a\", \"b\", \"c\"}</code> <code>B1.sanitizeString(s, charset?)</code> <code>(string, string?) -&gt; string</code> Keep only specified chars <code>B1.sanitizeString('Hello!@#$')</code> \u2192 <code>\"Hello\"</code> <code>B1.removeChars(s, charset?)</code> <code>(string, string?) -&gt; string</code> Remove specified chars <code>B1.removeChars('Hello!@#$')</code> \u2192 <code>\"Hello\"</code> <code>B1.trim(s)</code> <code>(string) -&gt; string</code> Remove whitespace <code>B1.trim('  hello  ')</code> \u2192 <code>\"hello\"</code> <code>B1.firstToUpper(s)</code> <code>(string) -&gt; string</code> Capitalize first letter <code>B1.firstToUpper('hello')</code> \u2192 <code>\"Hello\"</code> <code>B1.round(num, decimals?)</code> <code>(number, number?) -&gt; number</code> Round to decimals <code>B1.round(3.14159, 2)</code> \u2192 <code>3.14</code> <code>B1.getCoreName()</code> <code>() -&gt; string\\|nil</code> Get framework name <code>\"qb-core\"</code> or <code>\"esx\"</code> <code>B1.getInventoryName()</code> <code>() -&gt; string</code> Get inventory system <code>\"ox\"</code>, <code>\"qb\"</code>, or <code>\"esx\"</code> <code>B1.getCoreObject()</code> <code>() -&gt; table\\|nil</code> Get core object Core framework object <code>B1.getNotificationSystem()</code> <code>() -&gt; string</code> Get notification system <code>\"ox\"</code>, <code>\"zsx\"</code>, <code>\"qb\"</code>, <code>\"esx\"</code>, or <code>\"native\"</code> <code>B1.getProgressBarSystem()</code> <code>() -&gt; string</code> Get progress bar system <code>\"ox\"</code>, <code>\"zsx\"</code>, <code>\"qb\"</code>, <code>\"esx\"</code>, or <code>\"native\"</code> <code>B1.getSkillCheckSystem()</code> <code>() -&gt; string</code> Get skill check system <code>\"ox\"</code>, <code>\"zsx\"</code>, <code>\"qb\"</code>, <code>\"esx\"</code>, or <code>\"native\"</code>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#examples_1","title":"Examples","text":"<pre><code>-- Random generation\nlocal randomStr = B1.randomStr(10) -- \"aB3xY9mK2p\"\nlocal randomInt = B1.randomInt(6)  -- 123456\n\n-- String manipulation\nlocal parts = B1.splitStr('apple,banana,cherry', ',') \n-- Returns: {\"apple\", \"banana\", \"cherry\"}\n\nlocal clean = B1.sanitizeString('Hello!@#$', 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ') \n-- Returns: \"Hello \"\n\nlocal trimmed = B1.trim('  hello world  ') \n-- Returns: \"hello world\"\n\nlocal capitalized = B1.firstToUpper('hello world') \n-- Returns: \"Hello world\"\n\n-- Number formatting\nlocal rounded = B1.round(3.14159, 2) \n-- Returns: 3.14\n\n-- Framework detection\nlocal coreName = B1.getCoreName() \n-- Returns: \"qb-core\" or \"esx\" or nil\n\nlocal inventoryName = B1.getInventoryName() \n-- Returns: \"ox\", \"qb\", \"esx\", or \"unknown\"\n\nlocal coreObject = B1.getCoreObject() \n-- Returns: Core framework object or nil\n\n-- UI system detection\nlocal notificationSystem = B1.getNotificationSystem()\n-- Returns: \"ox\", \"zsx\", \"qb\", \"esx\", or \"native\"\n\nlocal progressBarSystem = B1.getProgressBarSystem()\n-- Returns: \"ox\", \"zsx\", \"qb\", \"esx\", or \"native\"\n\nlocal skillCheckSystem = B1.getSkillCheckSystem()\n-- Returns: \"ox\", \"zsx\", \"qb\", \"esx\", or \"native\"\n</code></pre>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#database-server-only","title":"\ud83d\uddc4\ufe0f Database (Server only)","text":"<p>Lightweight ORM with oxmysql adapter. All functions are await-style and non-blocking.</p> <p>Requires oxmysql</p> <p>Database functions will be disabled if oxmysql is not available.</p>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#basic-queries","title":"Basic Queries","text":"Function Type Description Example <code>B1.db.query(sql, params?)</code> <code>(string, table?) -&gt; table</code> Execute query, return rows <code>B1.db.query('SELECT * FROM users')</code> <code>B1.db.single(sql, params?)</code> <code>(string, table?) -&gt; table\\|nil</code> Get single row <code>B1.db.single('SELECT * FROM users WHERE id = ?', {1})</code> <code>B1.db.scalar(sql, params?)</code> <code>(string, table?) -&gt; any\\|nil</code> Get scalar value <code>B1.db.scalar('SELECT COUNT(*) FROM users')</code> <code>B1.db.insert(sql, params?)</code> <code>(string, table?) -&gt; number</code> Insert record, return ID <code>B1.db.insert('INSERT INTO users (name) VALUES (?)', {'John'})</code> <code>B1.db.update(sql, params?)</code> <code>(string, table?) -&gt; number</code> Update records, return affected <code>B1.db.update('UPDATE users SET name = ? WHERE id = ?', {'Jane', 1})</code>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#examples_2","title":"Examples","text":"<pre><code>-- Query multiple rows\nlocal players = B1.db.query('SELECT * FROM users WHERE job = ?', {'police'})\n-- Returns: {{id=1, name=\"John\", job=\"police\"}, ...}\n\n-- Get single row\nlocal user = B1.db.single('SELECT * FROM users WHERE id = ?', {1})\n-- Returns: {id=1, name=\"John\", job=\"police\"} or nil\n\n-- Get scalar value\nlocal count = B1.db.scalar('SELECT COUNT(*) FROM users')\n-- Returns: 42\n\n-- Insert record\nlocal insertId = B1.db.insert('INSERT INTO users (name, job) VALUES (?, ?)', {'John', 'police'})\n-- Returns: 123 (inserted ID)\n\n-- Update record\nlocal affected = B1.db.update('UPDATE users SET job = ? WHERE id = ?', {'admin', 1})\n-- Returns: 1 (affected rows)\n</code></pre>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#orm-models","title":"ORM Models","text":"Function Type Description <code>B1.orm.define(tableName, primaryKey?)</code> <code>(string, string?) -&gt; Model</code> Create a new model <code>Model:find(id)</code> <code>(any) -&gt; Row\\|nil</code> Find single record by ID <code>Model:findAll(where?, params?)</code> <code>(string?, table?) -&gt; table</code> Find all records with optional WHERE <code>Model:insert(data)</code> <code>(table) -&gt; number</code> Insert new record <code>Model:update(id, data)</code> <code>(any, table) -&gt; boolean</code> Update record by ID <code>Model:delete(id)</code> <code>(any) -&gt; boolean</code> Delete record by ID <code>Row:save()</code> <code>() -&gt; boolean</code> Save changes to database <code>Row:delete()</code> <code>() -&gt; boolean</code> Delete this record","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#examples_3","title":"Examples","text":"<pre><code>-- Define a model\nlocal Users = B1.orm.define('users', 'id')\n-- Primary key defaults to 'id' if not specified\n\n-- Find single record\nlocal user = Users:find(1)\nif user then\n    print(user.name) -- Access fields directly\n    user.name = 'New Name'\n    user:save() -- Save changes\nend\n\n-- Find all records\nlocal allUsers = Users:findAll()\n-- Returns: {{id=1, name=\"John\"}, {id=2, name=\"Jane\"}}\n\n-- Find with WHERE clause\nlocal policeUsers = Users:findAll('job = ?', {'police'})\n-- Returns: {{id=1, name=\"John\", job=\"police\"}}\n\n-- Insert new record\nlocal newId = Users:insert({\n    name = 'Jane',\n    job = 'police',\n    level = 5\n})\n-- Returns: 123 (inserted ID)\n\n-- Update record\nlocal success = Users:update(1, {job = 'admin', level = 10})\n-- Returns: true if successful\n\n-- Delete record\nlocal success = Users:delete(1)\n-- Returns: true if successful\n\n-- Row methods (on records returned by find/findAll)\nlocal user = Users:find(1)\nuser.job = 'admin'\nuser:save() -- Save changes to database\nuser:delete() -- Delete this record from database\n</code></pre>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#player-functions","title":"\ud83d\udc64 Player Functions","text":"<p>Normalized player management functions that work with both QBCore and ESX frameworks.</p>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#server-side-server-only","title":"Server-side (Server only)","text":"Function Type Description Example <code>B1.getCorePlayer(source)</code> <code>(number) -&gt; table\\|nil</code> Get core player object <code>B1.getCorePlayer(1)</code> <code>B1.getPlayerByIdentifier(identifier)</code> <code>(string) -&gt; table\\|nil</code> Get player by identifier <code>B1.getPlayerByIdentifier('ABC123')</code> <code>B1.getOfflinePlayerByIdentifier(identifier)</code> <code>(string) -&gt; table\\|nil</code> Get offline player <code>B1.getOfflinePlayerByIdentifier('ABC123')</code> <code>B1.getPlayers()</code> <code>() -&gt; table</code> Get all online players <code>B1.getPlayers()</code> <code>B1.addMoney(source, type, amount, reason?)</code> <code>(number, string, number, string?) -&gt; boolean</code> Add money to player <code>B1.addMoney(1, 'cash', 1000, 'Reward')</code> <code>B1.removeMoney(source, type, amount, reason?)</code> <code>(number, string, number, string?) -&gt; boolean</code> Remove money from player <code>B1.removeMoney(1, 'bank', 500, 'Purchase')</code> <code>B1.getMoney(source, type)</code> <code>(number, string) -&gt; number</code> Get player money <code>B1.getMoney(1, 'cash')</code> <code>B1.setMoney(source, type, amount)</code> <code>(number, string, number) -&gt; boolean</code> Set player money <code>B1.setMoney(1, 'bank', 5000)</code> <code>B1.getLicences(source)</code> <code>(number) -&gt; table</code> Get all licenses <code>B1.getLicences(1)</code> <code>B1.getLicence(source, type)</code> <code>(number, string) -&gt; boolean</code> Check specific license <code>B1.getLicence(1, 'driver')</code> <code>B1.addLicence(source, type)</code> <code>(number, string) -&gt; boolean</code> Add license <code>B1.addLicence(1, 'weapon')</code> <code>B1.removeLicence(source, type)</code> <code>(number, string) -&gt; boolean</code> Remove license <code>B1.removeLicence(1, 'driver')</code> <code>B1.getCitizenId(source)</code> <code>(number) -&gt; string\\|nil</code> Get citizen ID <code>B1.getCitizenId(1)</code> <code>B1.getPlayerName(source)</code> <code>(number) -&gt; string</code> Get player name <code>B1.getPlayerName(1)</code>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#examples_4","title":"Examples","text":"<pre><code>-- Get core player object\nlocal player = B1.getCorePlayer(source)\n-- Returns: Core player object or nil\n\n-- Get player by identifier\nlocal player = B1.getPlayerByIdentifier('ABC123')\n-- Returns: Player object or nil\n\n-- Get offline player\nlocal offlinePlayer = B1.getOfflinePlayerByIdentifier('ABC123')\n-- Returns: Offline player data or nil\n\n-- Get all players\nlocal players = B1.getPlayers()\n-- Returns: {{source=1, name=\"John\"}, {source=2, name=\"Jane\"}}\n\n-- Money management\nB1.addMoney(source, 'cash', 1000, 'Reward')\nB1.removeMoney(source, 'bank', 500, 'Purchase')\nlocal cash = B1.getMoney(source, 'cash')\nB1.setMoney(source, 'bank', 5000)\n\n-- License management\nlocal licenses = B1.getLicences(source)\n-- Returns: {driver=true, weapon=false, ...}\n\nlocal hasLicense = B1.getLicence(source, 'driver')\n-- Returns: true or false\n\nB1.addLicence(source, 'weapon')\nB1.removeLicence(source, 'driver')\n\n-- Identity\nlocal citizenId = B1.getCitizenId(source)\n-- Returns: \"ABC123\" or nil\n\nlocal playerName = B1.getPlayerName(source)\n-- Returns: \"John Doe\" or \"Unknown\"\n</code></pre>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#client-side-client-only","title":"Client-side (Client only)","text":"Function Type Description Example <code>B1.getCorePlayerData()</code> <code>() -&gt; table\\|nil</code> Get core player data <code>B1.getCorePlayerData()</code> <code>B1.getPlayerData()</code> <code>() -&gt; table\\|nil</code> Get normalized player data <code>B1.getPlayerData()</code> <code>B1.getPlayerJob()</code> <code>() -&gt; table\\|nil</code> Get player job info <code>B1.getPlayerJob()</code> <code>B1.getPlayerGang()</code> <code>() -&gt; table\\|nil</code> Get player gang info <code>B1.getPlayerGang()</code> <code>B1.getPlayerMoney(type)</code> <code>(string) -&gt; number</code> Get player money <code>B1.getPlayerMoney('cash')</code> <code>B1.getPlayerName()</code> <code>() -&gt; string</code> Get player name <code>B1.getPlayerName()</code> <code>B1.getCitizenId()</code> <code>() -&gt; string\\|nil</code> Get citizen ID (callback) <code>B1.getCitizenId()</code> <code>B1.notify(message, type?, length?)</code> <code>(string, string?, number?) -&gt; void</code> Show notification <code>B1.notify('Hello!', 'success')</code>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#examples_5","title":"Examples","text":"<pre><code>-- Get player data\nlocal playerData = B1.getPlayerData()\n-- Returns: {\n--   identifier = \"ABC123\",\n--   job = {name=\"police\", label=\"Police\", grade=1, isboss=false, onduty=true},\n--   money = {cash=1000, bank=5000},\n--   bank = 5000,\n--   metadata = {...},\n--   charinfo = {firstname=\"John\", lastname=\"Doe\"}\n-- }\n\n-- Get specific data\nlocal job = B1.getPlayerJob()\n-- Returns: {name=\"police\", label=\"Police\", grade=1, isboss=false, onduty=true}\n\nlocal gang = B1.getPlayerGang()\n-- Returns: QB gang data or ESX job data\n\nlocal cash = B1.getPlayerMoney('cash')\n-- Returns: 1000\n\nlocal bank = B1.getPlayerMoney('bank')\n-- Returns: 5000\n\nlocal name = B1.getPlayerName()\n-- Returns: \"John Doe\"\n\nlocal citizenId = B1.getCitizenId()\n-- Returns: \"ABC123\" (via server callback)\n\n-- Notifications\nB1.notify('Hello world!', 'success', 5000)\nB1.notify('Warning message', 'warning')\nB1.notify('Error occurred', 'error')\n</code></pre>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#money-types","title":"Money Types","text":"Type QBCore ESX Description <code>cash</code> \u2705 \u2705 Cash money <code>bank</code> \u2705 \u2705 Bank account <code>black</code> \u274c \u2705 Black money (ESX only)","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#vehicle-functions","title":"\ud83d\ude97 Vehicle Functions","text":"<p>Vehicle management functions for spawning, plate detection, and label retrieval.</p>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#server-side-server-only_1","title":"Server-side (Server only)","text":"Function Type Description Example <code>B1.spawnVehicle(source, model, coords?, warp?)</code> <code>(number, string, vector4?, boolean?) -&gt; number\\|nil</code> Spawn vehicle for player <code>B1.spawnVehicle(1, 'adder', vector4(0,0,0,0), true)</code> <code>B1.getPlate(netId)</code> <code>(number) -&gt; string\\|nil</code> Get vehicle plate <code>B1.getPlate(123)</code> <code>B1.getVehicleLabel(model)</code> <code>(string) -&gt; string</code> Get vehicle display name <code>B1.getVehicleLabel('adder')</code>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#examples_6","title":"Examples","text":"<pre><code>-- Spawn vehicle for player\nlocal netId = B1.spawnVehicle(source, 'adder', vector4(0, 0, 0, 0), true)\n-- Returns: 123 (network ID) or nil\n\n-- Get vehicle plate\nlocal plate = B1.getPlate(netId)\n-- Returns: \"ABC123\" or nil\n\n-- Get vehicle label\nlocal label = B1.getVehicleLabel('adder')\n-- Returns: \"Truffade Adder\" or \"adder\"\n</code></pre>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#client-side-client-only_1","title":"Client-side (Client only)","text":"Function Type Description Example <code>B1.spawnVehicle(model, cb?, coords?, isnetworked?, teleportInto?)</code> <code>(string, function?, vector4?, boolean?, boolean?) -&gt; number\\|nil</code> Spawn vehicle <code>B1.spawnVehicle('adder', function(id) end)</code> <code>B1.getPlate(vehicle)</code> <code>(number\\|entity) -&gt; string\\|nil</code> Get vehicle plate <code>B1.getPlate(vehicle)</code> <code>B1.getVehicleLabel(model)</code> <code>(string) -&gt; string</code> Get vehicle label (callback) <code>B1.getVehicleLabel('adder')</code>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#examples_7","title":"Examples","text":"<pre><code>-- Spawn vehicle\nlocal netId = B1.spawnVehicle('adder', function(vehicle)\n    print('Vehicle spawned:', vehicle)\nend, vector4(0, 0, 0, 0), true, true)\n-- Returns: 123 (network ID) or nil\n\n-- Get vehicle plate\nlocal plate = B1.getPlate(vehicle) -- or netId\n-- Returns: \"ABC123\" or nil\n\n-- Get vehicle label\nlocal label = B1.getVehicleLabel('adder')\n-- Returns: \"Truffade Adder\" (via server callback)\n</code></pre>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#vehicle-spawning","title":"Vehicle Spawning","text":"Parameter Type Default Description <code>model</code> <code>string</code> - Vehicle model name (e.g., 'adder', 'zentorno') <code>coords</code> <code>vector4</code> <code>Config.Vehicle.DefaultSpawn</code> Spawn coordinates (x, y, z, heading) <code>warp</code>/<code>teleportInto</code> <code>boolean</code> <code>true</code> Whether to teleport player into vehicle <code>isnetworked</code> <code>boolean</code> <code>true</code> Whether vehicle should be networked","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#ui-functions-client-only","title":"\ud83c\udfa8 UI Functions (Client only)","text":"<p>Client-side UI functions for notifications, progress bars, and skill checks across different systems.</p> <p>Important</p> <p>UI functions are client-side only as they require player interaction. To send UI elements from server to client, use <code>B1.notifyServer()</code> or <code>TriggerClientEvent</code> with the appropriate client-side function.</p>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#supported-systems","title":"Supported Systems","text":"System Notifications Progress Bars Skill Checks ox_lib \u2705 \u2705 \u2705 ZSX_UI \u2705 \u2705 \u274c QBCore \u2705 \u2705 \u274c ESX \u2705 \u2705 \u274c Native \u2705 \u274c \u274c <p>Note</p> <ul> <li>ZSX_UI ProgressBar now fully supported with correct API</li> <li>QBCore and ESX don't have built-in skill check systems - fall back to ox_lib if available</li> <li>ZSX_UI notifications use <code>exports['ZSX_UIV2']:Notification()</code> with serial return for removal</li> </ul>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#functions_2","title":"Functions","text":"Function Type Description Example <code>B1.notify(message, type?, duration?, position?)</code> <code>(string, string?, number?, string?) -&gt; any</code> Show notification <code>B1.notify('Hello!', 'success', 5000, 'top-right')</code> <code>B1.progressBar(label, duration?, options?)</code> <code>(string, number?, table?) -&gt; boolean</code> Show progress bar <code>B1.progressBar('Loading...', 10000, {onFinish=function() end})</code> <code>B1.skillCheck(difficulty?, options?)</code> <code>(string?, table?) -&gt; boolean</code> Show skill check <code>B1.skillCheck('easy', {duration=5000})</code> <code>B1.removeNotification(serial)</code> <code>(any) -&gt; void</code> Remove notification (ZSX_UI only) <code>B1.removeNotification(serial)</code>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#notification-examples","title":"Notification Examples","text":"<pre><code>-- Basic notification (client-side only)\nB1.notify('Hello world!', 'success')\n\n-- Custom duration and position\nB1.notify('Warning message', 'warning', 3000, 'bottom-left')\n\n-- Different types\nB1.notify('Info message', 'info')\nB1.notify('Success message', 'success')\nB1.notify('Warning message', 'warning')\nB1.notify('Error message', 'error')\n\n-- ZSX_UI specific (returns serial for removal)\nlocal serial = B1.notify('Permanent notification', 'info', -1)\n-- Remove notification later\nB1.removeNotification(serial)\n</code></pre>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#server-client-ui","title":"Server \u2192 Client UI","text":"<pre><code>-- Server-side: Send notification to specific player\nB1.notifyServer(source, 'Server notification', 'info', 5000)\n\n-- Server-side: Send notification to all players\nB1.notifyServer(-1, 'Global notification', 'success', 3000)\n\n-- Server-side: Using different notification types\nB1.notifyServer(source, 'Success message', 'success', 5000)\nB1.notifyServer(source, 'Error message', 'error', 5000)\nB1.notifyServer(source, 'Warning message', 'warning', 5000)\nB1.notifyServer(source, 'Info message', 'info', 5000)\n\n-- Server-side: Using numeric types\nB1.notifyServer(source, 'Numeric success', 2, 5000) -- 2 = success\nB1.notifyServer(source, 'Numeric error', 3, 5000)   -- 3 = error\n</code></pre>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#progress-bar-examples","title":"Progress Bar Examples","text":"<pre><code>-- Basic progress bar\nB1.progressBar('Loading...', 10000)\n\n-- With callbacks\nB1.progressBar('Processing...', 5000, {\n    onFinish = function()\n        B1.notify('Process completed!', 'success')\n    end,\n    onCancel = function()\n        B1.notify('Process cancelled', 'warning')\n    end\n})\n\n-- With animation\nB1.progressBar('Repairing vehicle...', 15000, {\n    anim = {\n        dict = 'mini@repair',\n        clip = 'fixing_a_ped'\n    },\n    prop = {\n        model = 'prop_tool_wrench',\n        bone = 57005,\n        pos = vector3(0.1, 0.0, 0.0),\n        rot = vector3(0.0, 0.0, 0.0)\n    },\n    disable = {\n        car = true,\n        move = true,\n        combat = true,\n        mouse = false\n    }\n})\n</code></pre>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#skill-check-examples","title":"Skill Check Examples","text":"<pre><code>-- Basic skill check\nlocal success = B1.skillCheck('easy')\n\n-- With custom options\nlocal success = B1.skillCheck('hard', {\n    duration = 8000,\n    position = 'center',\n    disable = {\n        car = true,\n        move = true,\n        combat = true,\n        mouse = false\n    }\n})\n\n-- Handle result\nif success then\n    B1.notify('Skill check passed!', 'success')\nelse\n    B1.notify('Skill check failed!', 'error')\nend\n</code></pre>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#system-detection","title":"System Detection","text":"<pre><code>-- Get current systems\nlocal notificationSystem = B1.getNotificationSystem() -- 'ox', 'zsx', 'qb', 'esx', 'native'\nlocal progressBarSystem = B1.getProgressBarSystem()   -- 'ox', 'zsx', 'qb', 'esx', 'native'\nlocal skillCheckSystem = B1.getSkillCheckSystem()     -- 'ox', 'zsx', 'qb', 'esx', 'native'\n\n-- Check if specific system is available\nif B1.getNotificationSystem() == 'ox' then\n    B1.log('info', 'Using ox_lib notifications')\nend\n</code></pre>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#system-specific-features","title":"System-Specific Features","text":"System Notifications Progress Bars Skill Checks Special Features ox_lib <code>exports.ox_lib:notify()</code> <code>exports.ox_lib:progressBar()</code> <code>exports.ox_lib:skillCheck()</code> Full feature support ZSX_UI <code>exports['ZSX_UIV2']:Notification()</code> <code>exports['ZSX_UIV2']:ProgressBar()</code> \u274c Notification removal with serial QBCore <code>QBCore.Functions.Notify()</code> <code>QBCore.Functions.Progressbar()</code> \u274c Framework integration ESX <code>ESX.ShowNotification()</code> <code>ESX.Progressbar()</code> \u274c Framework integration Native <code>DrawNotification()</code> \u274c \u274c Basic fallback","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#api-references","title":"API References","text":"<ul> <li>ZSX_UI: Notifications | ProgressBar</li> <li>QBCore: ProgressBar</li> <li>ESX: ProgressBar</li> </ul>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#inventory-functions-server-only","title":"\ud83c\udf92 Inventory Functions (Server only)","text":"<p>Server-side inventory management with ox_inventory integration.</p> <p>Requires ox_inventory</p> <p>Inventory functions will be disabled if ox_inventory is not available.</p>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#functions_3","title":"Functions","text":"Function Type Description Example <code>B1.inv.add(src, name, count?, metadata?, slot?)</code> <code>(number, string, number?, table?, number?) -&gt; boolean</code> Add item to inventory <code>B1.inv.add(1, 'bread', 5, {quality=100})</code> <code>B1.inv.remove(src, name, count?, metadata?, slot?)</code> <code>(number, string, number?, table?, number?) -&gt; boolean</code> Remove item from inventory <code>B1.inv.remove(1, 'bread', 2)</code> <code>B1.inv.canCarry(src, name, count?, metadata?)</code> <code>(number, string, number?, table?) -&gt; boolean</code> Check if player can carry <code>B1.inv.canCarry(1, 'bread', 10)</code> <code>B1.inv.get(src, name, metadata?)</code> <code>(number, string, table?) -&gt; table\\|nil</code> Get item from inventory <code>B1.inv.get(1, 'bread')</code> <code>B1.inv.search(src, searchType, items, metadata?)</code> <code>(number, string, table, table?) -&gt; table</code> Search inventory <code>B1.inv.search(1, 'slots', {'bread', 'water'})</code>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#examples_8","title":"Examples","text":"<pre><code>-- Add item\nB1.inv.add(source, 'bread', 5, {quality = 100})\n-- Returns: true if successful\n\n-- Remove item\nB1.inv.remove(source, 'bread', 2)\n-- Returns: true if successful\n\n-- Check if player can carry\nlocal canCarry = B1.inv.canCarry(source, 'bread', 10)\n-- Returns: true or false\n\n-- Get item\nlocal item = B1.inv.get(source, 'bread')\n-- Returns: {name=\"bread\", count=5, metadata={...}} or nil\n\n-- Search inventory\nlocal items = B1.inv.search(source, 'slots', {'bread', 'water'})\n-- Returns: {{name=\"bread\", count=5}, {name=\"water\", count=2}}\n</code></pre>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#configuration","title":"\u2699\ufe0f Configuration","text":"<p>Edit <code>config.lua</code> to customize behavior:</p> <pre><code>-- B1-lib Configuration\n-- Core framework detection\nConfig.Core = 'auto' -- 'auto'|'qb-core'|'esx'\n\n-- Notification system\nConfig.Notification = 'auto' -- 'auto'|'ox'|'zsx'|'esx'|'qb'|'native'\n\n-- Progress bar system\nConfig.ProgressBar = 'auto' -- 'auto'|'ox'|'zsx'|'esx'|'qb'|'native'\n\n-- Skill check system\nConfig.SkillCheck = 'auto' -- 'auto'|'ox'|'zsx'|'esx'|'qb'|'native'\n\n-- Logging\nConfig.LogTag = '^3[b1-lib]^7'\nConfig.LogLevel = 'info' -- 'debug'|'info'|'warning'|'error'\n\n-- Vehicle defaults\nConfig.VehicleDefaultSpawn = vector4(-42.4, -1098.3, 26.4, 70.0)\n\n-- Notification settings\nConfig.NotificationDuration = 5000 -- Default notification duration in ms\nConfig.NotificationPosition = 'top-right' -- 'top-left'|'top-right'|'bottom-left'|'bottom-right'|'center'\n\n-- Progress bar settings\nConfig.ProgressBarDuration = 10000 -- Default progress bar duration in ms\nConfig.ProgressBarPosition = 'bottom' -- 'top'|'bottom'|'center'\n\n-- Skill check settings\nConfig.SkillCheckDuration = 5000 -- Default skill check duration in ms\nConfig.SkillCheckDifficulty = 'easy' -- 'easy'|'medium'|'hard'\n</code></pre>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#configuration-options","title":"Configuration Options","text":"Option Type Default Description <code>Config.Core</code> <code>string</code> <code>'auto'</code> Framework detection mode <code>Config.Notification</code> <code>string</code> <code>'auto'</code> Notification system <code>Config.ProgressBar</code> <code>string</code> <code>'auto'</code> Progress bar system <code>Config.SkillCheck</code> <code>string</code> <code>'auto'</code> Skill check system <code>Config.LogTag</code> <code>string</code> <code>'^3[b1-lib]^7'</code> Log message prefix <code>Config.LogLevel</code> <code>string</code> <code>'info'</code> Minimum log level <code>Config.VehicleDefaultSpawn</code> <code>vector4</code> <code>vector4(-42.4, -1098.3, 26.4, 70.0)</code> Default vehicle spawn location <code>Config.NotificationDuration</code> <code>number</code> <code>5000</code> Default notification duration (ms) <code>Config.NotificationPosition</code> <code>string</code> <code>'top-right'</code> Notification position <code>Config.ProgressBarDuration</code> <code>number</code> <code>10000</code> Default progress bar duration (ms) <code>Config.ProgressBarPosition</code> <code>string</code> <code>'bottom'</code> Progress bar position <code>Config.SkillCheckDuration</code> <code>number</code> <code>5000</code> Default skill check duration (ms) <code>Config.SkillCheckDifficulty</code> <code>string</code> <code>'easy'</code> Default skill check difficulty","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#faq-troubleshooting","title":"\u2753 FAQ / Troubleshooting","text":"","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#missing-dependencies","title":"Missing Dependencies","text":"Dependency Behavior Solution oxmysql not found Database functions disabled, warnings logged Install oxmysql ox_inventory not found Inventory functions disabled, warnings logged Install ox_inventory ox_lib not found Falls back to core notifications Install ox_lib or use core notifications","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#framework-detection","title":"Framework Detection","text":"<ul> <li>Auto-detection checks running <code>qb-core</code> or <code>esx</code> resources.</li> <li>Manual override: set <code>Config.Core = 'qb-core'</code> or <code>'esx'</code>.</li> <li>No framework: functions return safe defaults and warn.</li> </ul>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#common-issues","title":"Common Issues","text":"Issue Cause Solution Player functions not working Framework not started Ensure QBCore/ESX is running Database errors oxmysql not configured Check oxmysql connection Vehicle spawning fails Invalid model name Verify vehicle model exists Notifications not showing ox_lib not installed Use core notifications or install ox_lib","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#performance-notes","title":"Performance Notes","text":"<ul> <li>\u2705 DB functions are await-style (non-blocking)</li> <li>\u2705 Vehicle data cached on server start</li> <li>\u2705 Logger respects level settings</li> <li>\u2705 Graceful fallbacks for missing dependencies</li> </ul>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#complete-examples","title":"\ud83d\udcda Complete Examples","text":"","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#basic-resource-example","title":"Basic Resource Example","text":"<pre><code>-- client.lua\n-- Get B1 object (recommended approach)\nlocal B1 = exports['b1-lib']:getB1Object()\n\nlocal function onPlayerSpawn()\n    local playerData = B1.getPlayerData()\n    if playerData then\n        B1.notify('Welcome back, ' .. playerData.charinfo.firstname, 'success')\n    end\nend\n\nRegisterNetEvent('QBCore:Client:OnPlayerLoaded', onPlayerSpawn)\nRegisterNetEvent('esx:playerLoaded', onPlayerSpawn)\n</code></pre> <pre><code>-- server.lua\n-- Get B1 object (recommended approach)\nlocal B1 = exports['b1-lib']:getB1Object()\n\nlocal function giveReward(source, amount)\n    local success = B1.addMoney(source, 'bank', amount, 'Daily reward')\n    if success then\n        B1.log('info', 'Gave reward to player', { ctx = { source = source, amount = amount } })\n    end\nend\n\nRegisterCommand('reward', function(source, args)\n    local amount = tonumber(args[1]) or 1000\n    giveReward(source, amount)\nend, false)\n</code></pre>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#advanced-orm-example","title":"Advanced ORM Example","text":"<pre><code>-- server.lua\n-- Get B1 object (recommended approach)\nlocal B1 = exports['b1-lib']:getB1Object()\n\nlocal Players = B1.orm.define('players', 'id')\n\n-- Create player record\nlocal function createPlayer(citizenId, name, job)\n    return Players:insert({\n        citizenid = citizenId,\n        name = name,\n        job = job,\n        level = 1,\n        created_at = os.time()\n    })\nend\n\n-- Update player level\nlocal function levelUpPlayer(citizenId)\n    local player = Players:findAll('citizenid = ?', {citizenId})[1]\n    if player then\n        player.level = player.level + 1\n        player:save()\n        B1.log('info', 'Player leveled up', { ctx = { citizenId = citizenId, level = player.level } })\n    end\nend\n</code></pre>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-Lib/Documention/#summary","title":"\ud83c\udfaf Summary","text":"<p>B1-lib provides a clean, normalized API that works with both QBCore and ESX frameworks, making it easy to write framework-agnostic code. With comprehensive logging, database ORM, and graceful fallbacks, it's the perfect library for modern FiveM development.</p> <p>Key Features</p> <ul> <li>\ud83d\udd04 Framework Agnostic \u2014 QBCore and ESX</li> <li>\ud83d\uddc4\ufe0f Lightweight ORM \u2014 4DaysORM-inspired DB layer</li> <li>\ud83d\udcdd Advanced Logging \u2014 Colored output + traceback</li> <li>\ud83c\udfa8 Unified UI System \u2014 Notifications / progress / skill checks</li> <li>\ud83d\ude97 Vehicle Management \u2014 Spawn, plate, labels</li> <li>\ud83d\udc64 Player Functions \u2014 Normalized data + money ops</li> <li>\ud83c\udf92 Inventory Integration \u2014 ox_inventory helpers</li> <li>\u26a1 Performance \u2014 Await-style, non-blocking</li> <li>\ud83d\udd27 Simple Config \u2014 <code>Config.[value] =</code> format</li> </ul>","tags":["FiveM","QBCore","ESX","Lua"]},{"location":"FiveM-Resources/B1-skillz/Installation%20Guide/","title":"Installation Guide","text":"<ol> <li> <p>Download and Place the Resource:    Download the <code>B1-skillz</code> resource and move it to your resource folder.</p> </li> <li> <p>Folder Naming:    Ensure the folder is named <code>B1-skillz</code>. Remove any <code>-qb</code> or <code>-esx</code> suffix if present.</p> </li> <li> <p>Database Configuration:    Import the accompanying SQL file into your server's database.</p> </li> <li> <p>Server Configuration:    If you have added it to a folder that is already being ensured then you have completed the process otherwise, add <code>ensure B1-skillz</code> to your <code>server.cfg</code> file.</p> </li> </ol> <p>Warning</p> <p>Make sure you have properly followed all steps in the Installation Guide before reporting an issue.</p> <p>Info</p> <p>All exports are client side only.</p>"},{"location":"FiveM-Resources/B1-skillz/Installation%20Guide/#resource-preview","title":"Resource Preview","text":"<p>Skills Menu:</p> <p></p>"},{"location":"FiveM-Resources/B1-skillz/Client/CheckSkill/","title":"CheckSkill","text":"<ul> <li>Purpose: Checks if a skill meets or exceeds a certain value.</li> <li>Arguments: <code>skill</code> - <code>string</code> - The name of the skill to check. <code>val</code> - <code>int</code> - The value to check against.  </li> <li>Returns: <code>boolean</code> - Whether the skill meets or exceeds the given value.</li> <li>Usage: <pre><code>exports[\"B1-skillz\"]:CheckSkill(\"Lung Capacity\", 50, function(hasskill)\n    if hasskill then\n        print(\"Lung Capacity 50 or over\")\n    else\n        print(\"Lung Capacity lower than 50\")\n    end\nend)\n</code></pre></li> </ul> <p>Info</p> <p>This function is asynchronous, so it requires a callback function to be passed in. The callback function will be called with a boolean value indicating whether the skill meets or exceeds the given value. This function is useful for checking if a player has a certain skill level before allowing them to perform an action.</p>"},{"location":"FiveM-Resources/B1-skillz/Client/GetCurrentSkill/","title":"GetCurrentSkill","text":"<ul> <li>Purpose: Retrieves the current value of a given skill.</li> <li>Arguments: <code>skill</code> - <code>string</code> - The name of the skill to retrieve.</li> <li>Returns: <code>table</code></li> </ul> Key Type Description Current int Current Value of the skill RemoveAmount int RemoveAmount for that skill Stat string Name of the skill icon string FontAwesome icon name <ul> <li>Usage: <pre><code>CreateThread(function()\n    local shootingskill = exports[\"B1-skillz\"]:GetCurrentSkill(\"Shooting\")\n    ESX.DumpTable(shootingskill) -- Prints to server console.\n    print(shootingskill.Current)  -- Prints to client console.\nend)\n</code></pre></li> </ul>"},{"location":"FiveM-Resources/B1-skillz/Client/UpdateSkill/","title":"UpdateSkill","text":"<ul> <li>Purpose: Modifies a given skill by a specified amount.</li> <li>Arguments: <code>skill</code> - <code>string</code> - The name of the skill to modify. <code>amount</code> - <code>int</code> - The amount to modify the skill by.</li> <li>Usage: <pre><code>exports[\"B1-skillz\"]:UpdateSkill(\"Stamina\", 2)  -- Adds 2% to Stamina.\n</code></pre></li> </ul>"}]}